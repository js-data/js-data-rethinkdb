{"version":3,"file":"js-data-rethinkdb.js","sources":["../src/index.js"],"sourcesContent":["import {utils} from 'js-data'\nimport {\n  Adapter,\n  reserved\n} from 'js-data-adapter'\nimport rethinkdbdash from 'rethinkdbdash'\nimport snakeCase from 'lodash.snakecase'\n\nconst __super__ = Adapter.prototype\n\nconst R_OPTS_DEFAULTS = {\n  db: 'test'\n}\nconst INSERT_OPTS_DEFAULTS = {}\nconst UPDATE_OPTS_DEFAULTS = {}\nconst DELETE_OPTS_DEFAULTS = {}\nconst RUN_OPTS_DEFAULTS = {}\n\nconst equal = function (r, row, field, value) {\n  return row(field).default(null).eq(value)\n}\n\nconst notEqual = function (r, row, field, value) {\n  return row(field).default(null).ne(value)\n}\n\n/**\n * Default predicate functions for the filtering operators.\n *\n * @name module:js-data-rethinkdb.OPERATORS\n * @property {function} = Equality operator.\n * @property {function} == Equality operator.\n * @property {function} != Inequality operator.\n * @property {function} > \"Greater than\" operator.\n * @property {function} >= \"Greater than or equal to\" operator.\n * @property {function} < \"Less than\" operator.\n * @property {function} <= \"Less than or equal to\" operator.\n * @property {function} isectEmpty Operator to test that the intersection\n * between two arrays is empty.\n * @property {function} isectNotEmpty Operator to test that the intersection\n * between two arrays is NOT empty.\n * @property {function} in Operator to test whether a value is found in the\n * provided array.\n * @property {function} notIn Operator to test whether a value is NOT found in\n * the provided array.\n * @property {function} contains Operator to test whether an array contains the\n * provided value.\n * @property {function} notContains Operator to test whether an array does NOT\n * contain the provided value.\n */\nexport const OPERATORS = {\n  '=': equal,\n  '==': equal,\n  '===': equal,\n  '!=': notEqual,\n  '!==': notEqual,\n  '>': function (r, row, field, value) {\n    return row(field).default(null).gt(value)\n  },\n  '>=': function (r, row, field, value) {\n    return row(field).default(null).ge(value)\n  },\n  '<': function (r, row, field, value) {\n    return row(field).default(null).lt(value)\n  },\n  '<=': function (r, row, field, value) {\n    return row(field).default(null).le(value)\n  },\n  'isectEmpty': function (r, row, field, value) {\n    return row(field).default([]).setIntersection(r.expr(value).default([])).count().eq(0)\n  },\n  'isectNotEmpty': function (r, row, field, value) {\n    return row(field).default([]).setIntersection(r.expr(value).default([])).count().ne(0)\n  },\n  'in': function (r, row, field, value) {\n    return r.expr(value).default(r.expr([])).contains(row(field).default(null))\n  },\n  'notIn': function (r, row, field, value) {\n    return r.expr(value).default(r.expr([])).contains(row(field).default(null)).not()\n  },\n  'contains': function (r, row, field, value) {\n    return row(field).default([]).contains(value)\n  },\n  'notContains': function (r, row, field, value) {\n    return row(field).default([]).contains(value).not()\n  }\n}\n\nObject.freeze(OPERATORS)\n\n/**\n * RethinkDBAdapter class.\n *\n * @example\n * // Use Container instead of DataStore on the server\n * import { Container } from 'js-data';\n * import { RethinkDBAdapter } from 'js-data-rethinkdb';\n *\n * // Create a store to hold your Mappers\n * const store = new Container();\n *\n * // Create an instance of RethinkDBAdapter with default settings\n * const adapter = new RethinkDBAdapter();\n *\n * // Mappers in \"store\" will use the RethinkDB adapter by default\n * store.registerAdapter('rethinkdb', adapter, { default: true });\n *\n * // Create a Mapper that maps to a \"user\" table\n * store.defineMapper('user');\n *\n * @class RethinkDBAdapter\n * @extends Adapter\n * @param {object} [opts] Configuration options.\n * @param {boolean} [opts.debug=false] See {@link Adapter#debug}.\n * @param {object} [opts.deleteOpts={}] See {@link RethinkDBAdapter#deleteOpts}.\n * @param {object} [opts.insertOpts={}] See {@link RethinkDBAdapter#insertOpts}.\n * @param {object} [opts.operators={@link module:js-data-rethinkdb.OPERATORS}] See {@link RethinkDBAdapter#operators}.\n * @param {object} [opts.r] See {@link RethinkDBAdapter#r}.\n * @param {boolean} [opts.raw=false] See {@link Adapter#raw}.\n * @param {object} [opts.rOpts={}] See {@link RethinkDBAdapter#rOpts}.\n * @param {object} [opts.runOpts={}] See {@link RethinkDBAdapter#runOpts}.\n * @param {object} [opts.updateOpts={}] See {@link RethinkDBAdapter#updateOpts}.\n */\nexport function RethinkDBAdapter (opts) {\n  utils.classCallCheck(this, RethinkDBAdapter)\n  opts || (opts = {})\n\n  // Setup non-enumerable properties\n  Object.defineProperties(this, {\n    /**\n     * The rethinkdbdash instance used by this adapter. Use this directly when\n     * you need to write custom queries.\n     *\n     * @example <caption>Use default instance.</caption>\n     * import { RethinkDBAdapter } from 'js-data-rethinkdb';\n     * const adapter = new RethinkDBAdapter();\n     * adapter.r.dbDrop('foo').then(...);\n     *\n     * @example <caption>Configure default instance.</caption>\n     * import { RethinkDBAdapter } from 'js-data-rethinkdb';\n     * const adapter = new RethinkDBAdapter({\n     *   rOpts: {\n     *     user: 'myUser',\n     *     password: 'myPassword'\n     *   }\n     * });\n     * adapter.r.dbDrop('foo').then(...);\n     *\n     * @example <caption>Provide a custom instance.</caption>\n     * import rethinkdbdash from 'rethinkdbdash';\n     * import { RethinkDBAdapter } from 'js-data-rethinkdb';\n     * const r = rethinkdbdash();\n     * const adapter = new RethinkDBAdapter({\n     *   r: r\n     * });\n     * adapter.r.dbDrop('foo').then(...);\n     *\n     * @name RethinkDBAdapter#r\n     * @type {object}\n     */\n    r: {\n      writable: true,\n      value: undefined\n    },\n    databases: {\n      value: {}\n    },\n    indices: {\n      value: {}\n    },\n    tables: {\n      value: {}\n    }\n  })\n\n  Adapter.call(this, opts)\n\n  /**\n   * Default options to pass to r#insert.\n   *\n   * @name RethinkDBAdapter#insertOpts\n   * @type {object}\n   * @default {}\n   */\n  this.insertOpts || (this.insertOpts = {})\n  utils.fillIn(this.insertOpts, INSERT_OPTS_DEFAULTS)\n\n  /**\n   * Default options to pass to r#update.\n   *\n   * @name RethinkDBAdapter#updateOpts\n   * @type {object}\n   * @default {}\n   */\n  this.updateOpts || (this.updateOpts = {})\n  utils.fillIn(this.updateOpts, UPDATE_OPTS_DEFAULTS)\n\n  /**\n   * Default options to pass to r#delete.\n   *\n   * @name RethinkDBAdapter#deleteOpts\n   * @type {object}\n   * @default {}\n   */\n  this.deleteOpts || (this.deleteOpts = {})\n  utils.fillIn(this.deleteOpts, DELETE_OPTS_DEFAULTS)\n\n  /**\n   * Default options to pass to r#run.\n   *\n   * @name RethinkDBAdapter#runOpts\n   * @type {object}\n   * @default {}\n   */\n  this.runOpts || (this.runOpts = {})\n  utils.fillIn(this.runOpts, RUN_OPTS_DEFAULTS)\n\n  /**\n   * Override the default predicate functions for the specified operators.\n   *\n   * @name RethinkDBAdapter#operators\n   * @type {object}\n   * @default {}\n   */\n  this.operators || (this.operators = {})\n  utils.fillIn(this.operators, OPERATORS)\n\n  /**\n   * Options to pass to a new `rethinkdbdash` instance, if one was not provided\n   * at {@link RethinkDBAdapter#r}. See the [rethinkdbdash README][readme] for\n   * instance options.\n   *\n   * [readme]: https://github.com/neumino/rethinkdbdash#importing-the-driver\n   *\n   * @example <caption>Connect to localhost:8080, and let the driver find other instances.</caption>\n   * import { RethinkDBAdapter } from 'js-data-rethinkdb';\n   * const adapter = new RethinkDBAdapter({\n   *   rOpts: {\n   *     discovery: true\n   *   }\n   * });\n   *\n   * @example <caption>Connect to and only to localhost:8080.</caption>\n   * import { RethinkDBAdapter } from 'js-data-rethinkdb';\n   * const adapter = new RethinkDBAdapter();\n   *\n   * @example <caption>Do not create a connection pool.</caption>\n   * import { RethinkDBAdapter } from 'js-data-rethinkdb';\n   * const adapter = new RethinkDBAdapter({\n   *   rOpts: {\n   *     pool: false\n   *   }\n   * });\n   *\n   * @example <caption>Connect to a cluster seeding from `192.168.0.100`, `192.168.0.101`, `192.168.0.102`.</caption>\n   * import { RethinkDBAdapter } from 'js-data-rethinkdb';\n   * const adapter = new RethinkDBAdapter({\n   *   rOpts: {\n   *     servers: [\n   *       { host: '192.168.0.100', port: 28015 },\n   *       { host: '192.168.0.101', port: 28015 },\n   *       { host: '192.168.0.102', port: 28015 }\n   *     ]\n   *   }\n   * });\n   *\n   * @name RethinkDBAdapter#rOpts\n   * @see https://github.com/neumino/rethinkdbdash#importing-the-driver\n   * @type {object}\n   */\n  this.rOpts || (this.rOpts = {})\n  utils.fillIn(this.rOpts, R_OPTS_DEFAULTS)\n\n  this.r || (this.r = rethinkdbdash(this.rOpts))\n}\n\nAdapter.extend({\n  constructor: RethinkDBAdapter,\n\n  _handleErrors (cursor) {\n    if (cursor && cursor.errors > 0) {\n      if (cursor.first_error) {\n        throw new Error(cursor.first_error)\n      }\n      throw new Error('Unknown RethinkDB Error')\n    }\n  },\n\n  _count (mapper, query, opts) {\n    opts || (opts = {})\n    query || (query = {})\n\n    return this.filterSequence(this.selectTable(mapper, opts), query)\n      .count()\n      .run(this.getOpt('runOpts', opts))\n      .then((count) => [count, {}])\n  },\n\n  _create (mapper, props, opts) {\n    props || (props = {})\n    opts || (opts = {})\n\n    const insertOpts = this.getOpt('insertOpts', opts)\n    insertOpts.returnChanges = true\n\n    return this.selectTable(mapper, opts)\n      .insert(props, insertOpts)\n      .run(this.getOpt('runOpts', opts))\n      .then((cursor) => {\n        this._handleErrors(cursor)\n        let record\n        if (cursor && cursor.changes && cursor.changes.length && cursor.changes[0].new_val) {\n          record = cursor.changes[0].new_val\n        }\n        return [record, cursor]\n      })\n  },\n\n  _createMany (mapper, props, opts) {\n    props || (props = {})\n    opts || (opts = {})\n\n    const insertOpts = this.getOpt('insertOpts', opts)\n    insertOpts.returnChanges = true\n\n    return this.selectTable(mapper, opts)\n      .insert(props, insertOpts)\n      .run(this.getOpt('runOpts', opts))\n      .then((cursor) => {\n        this._handleErrors(cursor)\n        let records = []\n        if (cursor && cursor.changes && cursor.changes.length && cursor.changes) {\n          records = cursor.changes.map((change) => change.new_val)\n        }\n        return [records, cursor]\n      })\n  },\n\n  _destroy (mapper, id, opts) {\n    opts || (opts = {})\n\n    return this.selectTable(mapper, opts)\n      .get(id)\n      .delete(this.getOpt('deleteOpts', opts))\n      .run(this.getOpt('runOpts', opts))\n      .then((cursor) => {\n        this._handleErrors(cursor)\n        return [undefined, cursor]\n      })\n  },\n\n  _destroyAll (mapper, query, opts) {\n    query || (query = {})\n    opts || (opts = {})\n\n    return this.filterSequence(this.selectTable(mapper, opts), query)\n      .delete(this.getOpt('deleteOpts', opts))\n      .run(this.getOpt('runOpts', opts))\n      .then((cursor) => {\n        this._handleErrors(cursor)\n        return [undefined, cursor]\n      })\n  },\n\n  _find (mapper, id, opts) {\n    opts || (opts = {})\n\n    return this._pluck(mapper, this.selectTable(mapper, opts).get(id), opts)\n      .run(this.getOpt('runOpts', opts))\n      .then((record) => {\n        if (!record) {\n          record = undefined\n        }\n        return [record, {}]\n      })\n  },\n\n  _findAll (mapper, query, opts) {\n    opts || (opts = {})\n    query || (query = {})\n\n    return this._pluck(mapper, this.filterSequence(this.selectTable(mapper, opts), query), opts)\n      .run(this.getOpt('runOpts', opts))\n      .then((records) => [records, {}])\n  },\n\n  _pluck (mapper, rql, opts) {\n    if (utils.isString(opts.fields)) {\n      opts.fields = [opts.fields]\n    }\n    if (utils.isArray(opts.fields)) {\n      return rql.pluck(...opts.fields)\n    }\n    return rql\n  },\n\n  _sum (mapper, field, query, opts) {\n    if (!utils.isString(field)) {\n      throw new Error('field must be a string!')\n    }\n    opts || (opts = {})\n    query || (query = {})\n\n    return this.filterSequence(this.selectTable(mapper, opts), query)\n      .sum(field)\n      .run(this.getOpt('runOpts', opts))\n      .then((sum) => [sum, {}])\n  },\n\n  _update (mapper, id, props, opts) {\n    props || (props = {})\n    opts || (opts = {})\n\n    const updateOpts = this.getOpt('updateOpts', opts)\n    updateOpts.returnChanges = true\n\n    return this.selectTable(mapper, opts)\n      .get(id)\n      .update(props, updateOpts)\n      .run(this.getOpt('runOpts', opts))\n      .then((cursor) => {\n        this._handleErrors(cursor)\n        if (cursor.skipped) {\n          throw new Error('Not Found')\n        } else if (cursor && cursor.changes && cursor.changes.length && cursor.changes[0].new_val) {\n          return [cursor.changes[0].new_val, cursor]\n        } else {\n          return this._find(mapper, id, opts)\n        }\n      })\n  },\n\n  _updateAll (mapper, props, query, opts) {\n    props || (props = {})\n    query || (query = {})\n    opts || (opts = {})\n\n    const updateOpts = this.getOpt('updateOpts', opts)\n    updateOpts.returnChanges = true\n\n    return this.filterSequence(this.selectTable(mapper, opts), query)\n      .update(props, updateOpts)\n      .run(this.getOpt('runOpts', opts))\n      .then((cursor) => {\n        let records = []\n        this._handleErrors(cursor)\n        if (cursor && cursor.changes && cursor.changes.length) {\n          records = cursor.changes.map((change) => change.new_val)\n        }\n        return [records, cursor]\n      })\n  },\n\n  _updateMany (mapper, records, opts) {\n    records || (records = [])\n    opts || (opts = {})\n\n    const insertOpts = this.getOpt('insertOpts', opts)\n    insertOpts.returnChanges = true\n    insertOpts.conflict = 'update'\n\n    return this.selectTable(mapper, opts)\n      .insert(records, insertOpts)\n      .run(this.getOpt('runOpts', opts))\n      .then((cursor) => {\n        records = []\n        this._handleErrors(cursor)\n        if (cursor && cursor.changes && cursor.changes.length) {\n          records = cursor.changes.map((change) => change.new_val)\n        }\n        return [records, cursor]\n      })\n  },\n\n  _applyWhereFromObject (where) {\n    const fields = []\n    const ops = []\n    const predicates = []\n    utils.forOwn(where, (clause, field) => {\n      if (!utils.isObject(clause)) {\n        clause = {\n          '==': clause\n        }\n      }\n      utils.forOwn(clause, (expr, op) => {\n        fields.push(field)\n        ops.push(op)\n        predicates.push(expr)\n      })\n    })\n    return {\n      fields,\n      ops,\n      predicates\n    }\n  },\n\n  _applyWhereFromArray (where) {\n    const groups = []\n    where.forEach((_where, i) => {\n      if (utils.isString(_where)) {\n        return\n      }\n      const prev = where[i - 1]\n      const parser = utils.isArray(_where) ? this._applyWhereFromArray : this._applyWhereFromObject\n      const group = parser.call(this, _where)\n      if (prev === 'or') {\n        group.isOr = true\n      }\n      groups.push(group)\n    })\n    groups.isArray = true\n    return groups\n  },\n\n  _testObjectGroup (rql, group, row, opts) {\n    let i\n    const r = this.r\n    const fields = group.fields\n    const ops = group.ops\n    const predicates = group.predicates\n    const len = ops.length\n    for (i = 0; i < len; i++) {\n      let op = ops[i]\n      const isOr = op.charAt(0) === '|'\n      op = isOr ? op.substr(1) : op\n      const predicateFn = this.getOperator(op, opts)\n      if (predicateFn) {\n        const predicateResult = predicateFn(r, row, fields[i], predicates[i])\n        if (isOr) {\n          rql = rql ? rql.or(predicateResult) : predicateResult\n        } else {\n          rql = rql ? rql.and(predicateResult) : predicateResult\n        }\n      } else {\n        throw new Error(`Operator ${op} not supported!`)\n      }\n    }\n    return rql\n  },\n\n  _testArrayGroup (rql, groups, row, opts) {\n    let i\n    const len = groups.length\n    for (i = 0; i < len; i++) {\n      const group = groups[i]\n      let subQuery\n      if (group.isArray) {\n        subQuery = this._testArrayGroup(rql, group, row, opts)\n      } else {\n        subQuery = this._testObjectGroup(null, group, row, opts)\n      }\n      if (groups[i - 1]) {\n        if (group.isOr) {\n          rql = rql.or(subQuery)\n        } else {\n          rql = rql.and(subQuery)\n        }\n      } else {\n        rql = rql ? rql.and(subQuery) : subQuery\n      }\n    }\n    return rql\n  },\n\n  /**\n   * Apply the specified selection query to the provided RQL sequence.\n   *\n   * @name RethinkDBAdapter#filterSequence\n   * @method\n   * @param {object} mapper The mapper.\n   * @param {object} [query] Selection query.\n   * @param {object} [query.where] Filtering criteria.\n   * @param {string|Array} [query.orderBy] Sorting criteria.\n   * @param {string|Array} [query.sort] Same as `query.sort`.\n   * @param {number} [query.limit] Limit results.\n   * @param {number} [query.skip] Offset results.\n   * @param {number} [query.offset] Same as `query.skip`.\n   * @param {object} [opts] Configuration options.\n   * @param {object} [opts.operators] Override the default predicate functions\n   * for specified operators.\n   */\n  filterSequence (sequence, query, opts) {\n    const r = this.r\n\n    query = utils.plainCopy(query || {})\n    opts || (opts = {})\n    opts.operators || (opts.operators = {})\n    query.where || (query.where = {})\n    query.orderBy || (query.orderBy = query.sort)\n    query.orderBy || (query.orderBy = [])\n    query.skip || (query.skip = query.offset)\n\n    // Transform non-keyword properties to \"where\" clause configuration\n    utils.forOwn(query, (config, keyword) => {\n      if (reserved.indexOf(keyword) === -1) {\n        if (utils.isObject(config)) {\n          query.where[keyword] = config\n        } else {\n          query.where[keyword] = {\n            '==': config\n          }\n        }\n        delete query[keyword]\n      }\n    })\n\n    let rql = sequence\n\n    // Filter\n    let groups\n\n    if (utils.isObject(query.where) && Object.keys(query.where).length !== 0) {\n      groups = this._applyWhereFromArray([query.where])\n    } else if (utils.isArray(query.where)) {\n      groups = this._applyWhereFromArray(query.where)\n    }\n\n    if (groups) {\n      rql = rql.filter((row) => this._testArrayGroup(null, groups, row, opts) || true)\n    }\n\n    // Sort\n    if (query.orderBy) {\n      if (utils.isString(query.orderBy)) {\n        query.orderBy = [\n          [query.orderBy, 'asc']\n        ]\n      }\n      for (var i = 0; i < query.orderBy.length; i++) {\n        if (utils.isString(query.orderBy[i])) {\n          query.orderBy[i] = [query.orderBy[i], 'asc']\n        }\n        rql = (query.orderBy[i][1] || '').toUpperCase() === 'DESC' ? rql.orderBy(r.desc(query.orderBy[i][0])) : rql.orderBy(query.orderBy[i][0])\n      }\n    }\n\n    // Offset\n    if (query.skip) {\n      rql = rql.skip(+query.skip)\n    }\n\n    // Limit\n    if (query.limit) {\n      rql = rql.limit(+query.limit)\n    }\n\n    return rql\n  },\n\n  selectDb (opts) {\n    return this.r.db(utils.isUndefined(opts.db) ? this.rOpts.db : opts.db)\n  },\n\n  selectTable (mapper, opts) {\n    return this.selectDb(opts).table(mapper.table || snakeCase(mapper.name))\n  },\n\n  waitForDb (opts) {\n    opts || (opts = {})\n    const db = utils.isUndefined(opts.db) ? this.rOpts.db : opts.db\n    if (!this.databases[db]) {\n      this.databases[db] = this.r.branch(\n        this.r.dbList().contains(db),\n        true,\n        this.r.dbCreate(db)\n      ).run()\n    }\n    return this.databases[db]\n  },\n\n  waitForTable (mapper, opts) {\n    opts || (opts = {})\n    const table = utils.isString(mapper) ? mapper : (mapper.table || snakeCase(mapper.name))\n    let db = utils.isUndefined(opts.db) ? this.rOpts.db : opts.db\n    return this.waitForDb(opts).then(() => {\n      this.tables[db] = this.tables[db] || {}\n      if (!this.tables[db][table]) {\n        this.tables[db][table] = this.r.branch(this.r.db(db).tableList().contains(table), true, this.r.db(db).tableCreate(table)).run()\n      }\n      return this.tables[db][table]\n    })\n  },\n\n  waitForIndex (table, index, opts) {\n    opts || (opts = {})\n    let db = utils.isUndefined(opts.db) ? this.rOpts.db : opts.db\n    return this.waitForDb(opts).then(() => this.waitForTable(table, opts)).then(() => {\n      this.indices[db] = this.indices[db] || {}\n      this.indices[db][table] = this.indices[db][table] || {}\n      if (!this.tables[db][table][index]) {\n        this.tables[db][table][index] = this.r.branch(this.r.db(db).table(table).indexList().contains(index), true, this.r.db(db).table(table).indexCreate(index)).run().then(() => {\n          return this.r.db(db).table(table).indexWait(index).run()\n        })\n      }\n      return this.tables[db][table][index]\n    })\n  },\n\n  /**\n   * Return the number of records that match the selection query.\n   *\n   * @name RethinkDBAdapter#count\n   * @method\n   * @param {object} mapper the mapper.\n   * @param {object} [query] Selection query.\n   * @param {object} [query.where] Filtering criteria.\n   * @param {string|Array} [query.orderBy] Sorting criteria.\n   * @param {string|Array} [query.sort] Same as `query.sort`.\n   * @param {number} [query.limit] Limit results.\n   * @param {number} [query.skip] Offset results.\n   * @param {number} [query.offset] Same as `query.skip`.\n   * @param {object} [opts] Configuration options.\n   * @param {object} [opts.operators] Override the default predicate functions\n   * for specified operators.\n   * @param {boolean} [opts.raw=false] Whether to return a more detailed\n   * response object.\n   * @param {object} [opts.runOpts] Options to pass to r#run.\n   * @return {Promise}\n   */\n  count (mapper, query, opts) {\n    opts || (opts = {})\n    query || (query = {})\n\n    return this.waitForTable(mapper, opts)\n      .then(() => __super__.count.call(this, mapper, query, opts))\n  },\n\n  /**\n   * Create a new record.\n   *\n   * @name RethinkDBAdapter#create\n   * @method\n   * @param {object} mapper The mapper.\n   * @param {object} props The record to be created.\n   * @param {object} [opts] Configuration options.\n   * @param {object} [opts.insertOpts] Options to pass to r#insert.\n   * @param {boolean} [opts.raw=false] Whether to return a more detailed\n   * response object.\n   * @param {object} [opts.runOpts] Options to pass to r#run.\n   * @return {Promise}\n   */\n  create (mapper, props, opts) {\n    props || (props = {})\n    opts || (opts = {})\n\n    return this.waitForTable(mapper, opts)\n      .then(() => __super__.create.call(this, mapper, props, opts))\n  },\n\n  /**\n   * Create multiple records in a single batch.\n   *\n   * @name RethinkDBAdapter#createMany\n   * @method\n   * @param {object} mapper The mapper.\n   * @param {object} props The records to be created.\n   * @param {object} [opts] Configuration options.\n   * @param {object} [opts.insertOpts] Options to pass to r#insert.\n   * @param {boolean} [opts.raw=false] Whether to return a more detailed\n   * response object.\n   * @param {object} [opts.runOpts] Options to pass to r#run.\n   * @return {Promise}\n   */\n  createMany (mapper, props, opts) {\n    props || (props = {})\n    opts || (opts = {})\n\n    return this.waitForTable(mapper, opts)\n      .then(() => __super__.createMany.call(this, mapper, props, opts))\n  },\n\n  /**\n   * Destroy the record with the given primary key.\n   *\n   * @name RethinkDBAdapter#destroy\n   * @method\n   * @param {object} mapper The mapper.\n   * @param {(string|number)} id Primary key of the record to destroy.\n   * @param {object} [opts] Configuration options.\n   * @param {object} [opts.deleteOpts] Options to pass to r#delete.\n   * @param {boolean} [opts.raw=false] Whether to return a more detailed\n   * response object.\n   * @param {object} [opts.runOpts] Options to pass to r#run.\n   * @return {Promise}\n   */\n  destroy (mapper, id, opts) {\n    opts || (opts = {})\n\n    return this.waitForTable(mapper, opts)\n      .then(() => __super__.destroy.call(this, mapper, id, opts))\n  },\n\n  /**\n   * Destroy the records that match the selection query.\n   *\n   * @name RethinkDBAdapter#destroyAll\n   * @method\n   * @param {object} mapper the mapper.\n   * @param {object} [query] Selection query.\n   * @param {object} [query.where] Filtering criteria.\n   * @param {string|Array} [query.orderBy] Sorting criteria.\n   * @param {string|Array} [query.sort] Same as `query.sort`.\n   * @param {number} [query.limit] Limit results.\n   * @param {number} [query.skip] Offset results.\n   * @param {number} [query.offset] Same as `query.skip`.\n   * @param {object} [opts] Configuration options.\n   * @param {object} [opts.deleteOpts] Options to pass to r#delete.\n   * @param {object} [opts.operators] Override the default predicate functions\n   * for specified operators.\n   * @param {boolean} [opts.raw=false] Whether to return a more detailed\n   * response object.\n   * @param {object} [opts.runOpts] Options to pass to r#run.\n   * @return {Promise}\n   */\n  destroyAll (mapper, query, opts) {\n    opts || (opts = {})\n    query || (query = {})\n\n    return this.waitForTable(mapper, opts)\n      .then(() => __super__.destroyAll.call(this, mapper, query, opts))\n  },\n\n  /**\n   * Retrieve the record with the given primary key.\n   *\n   * @name RethinkDBAdapter#find\n   * @method\n   * @param {object} mapper The mapper.\n   * @param {(string|number)} id Primary key of the record to retrieve.\n   * @param {object} [opts] Configuration options.\n   * @param {string[]} [opts.fields] Select a subset of fields to be returned.\n   * @param {boolean} [opts.raw=false] Whether to return a more detailed\n   * response object.\n   * @param {object} [opts.runOpts] Options to pass to r#run.\n   * @param {string[]} [opts.with=[]] Relations to eager load.\n   * @return {Promise}\n   */\n  find (mapper, id, opts) {\n    opts || (opts = {})\n    opts.with || (opts.with = [])\n\n    const relationList = mapper.relationList || []\n    let tasks = [this.waitForTable(mapper, opts)]\n\n    relationList.forEach((def) => {\n      const relationName = def.relation\n      const relationDef = def.getRelation()\n      if (!opts.with || opts.with.indexOf(relationName) === -1) {\n        return\n      }\n      if (def.foreignKey && def.type !== 'belongsTo') {\n        if (def.type === 'belongsTo') {\n          tasks.push(this.waitForIndex(mapper.table || snakeCase(mapper.name), def.foreignKey, opts))\n        } else {\n          tasks.push(this.waitForIndex(relationDef.table || snakeCase(relationDef.name), def.foreignKey, opts))\n        }\n      }\n    })\n    return Promise.all(tasks).then(() => __super__.find.call(this, mapper, id, opts))\n  },\n\n  /**\n   * Retrieve the records that match the selection query.\n   *\n   * @name RethinkDBAdapter#findAll\n   * @method\n   * @param {object} mapper The mapper.\n   * @param {object} [query] Selection query.\n   * @param {object} [query.where] Filtering criteria.\n   * @param {string|Array} [query.orderBy] Sorting criteria.\n   * @param {string|Array} [query.sort] Same as `query.sort`.\n   * @param {number} [query.limit] Limit results.\n   * @param {number} [query.skip] Offset results.\n   * @param {number} [query.offset] Same as `query.skip`.\n   * @param {object} [opts] Configuration options.\n   * @param {string[]} [opts.fields] Select a subset of fields to be returned.\n   * @param {object} [opts.operators] Override the default predicate functions\n   * for specified operators.\n   * @param {boolean} [opts.raw=false] Whether to return a more detailed\n   * response object.\n   * @param {object} [opts.runOpts] Options to pass to r#run.\n   * @param {string[]} [opts.with=[]] Relations to eager load.\n   * @return {Promise}\n   */\n  findAll (mapper, query, opts) {\n    opts || (opts = {})\n    opts.with || (opts.with = [])\n    query || (query = {})\n\n    const relationList = mapper.relationList || []\n    let tasks = [this.waitForTable(mapper, opts)]\n\n    relationList.forEach((def) => {\n      const relationName = def.relation\n      const relationDef = def.getRelation()\n      if (!opts.with || opts.with.indexOf(relationName) === -1) {\n        return\n      }\n      if (def.foreignKey && def.type !== 'belongsTo') {\n        if (def.type === 'belongsTo') {\n          tasks.push(this.waitForIndex(mapper.table || snakeCase(mapper.name), def.foreignKey, opts))\n        } else {\n          tasks.push(this.waitForIndex(relationDef.table || snakeCase(relationDef.name), def.foreignKey, opts))\n        }\n      }\n    })\n    return Promise.all(tasks).then(() => __super__.findAll.call(this, mapper, query, opts))\n  },\n\n  /**\n   * Resolve the predicate function for the specified operator based on the\n   * given options and this adapter's settings.\n   *\n   * @name RethinkDBAdapter#getOperator\n   * @method\n   * @param {string} operator The name of the operator.\n   * @param {object} [opts] Configuration options.\n   * @param {object} [opts.operators] Override the default predicate functions\n   * for specified operators.\n   * @return {*} The predicate function for the specified operator.\n   */\n  getOperator (operator, opts) {\n    opts || (opts = {})\n    opts.operators || (opts.operators = {})\n    let ownOps = this.operators || {}\n    return utils.isUndefined(opts.operators[operator]) ? ownOps[operator] : opts.operators[operator]\n  },\n\n  /**\n   * Return the sum of the specified field of records that match the selection\n   * query.\n   *\n   * @name RethinkDBAdapter#sum\n   * @method\n   * @param {object} mapper The mapper.\n   * @param {string} field The field to sum.\n   * @param {object} [query] Selection query.\n   * @param {object} [query.where] Filtering criteria.\n   * @param {string|Array} [query.orderBy] Sorting criteria.\n   * @param {string|Array} [query.sort] Same as `query.sort`.\n   * @param {number} [query.limit] Limit results.\n   * @param {number} [query.skip] Offset results.\n   * @param {number} [query.offset] Same as `query.skip`.\n   * @param {object} [opts] Configuration options.\n   * @param {object} [opts.operators] Override the default predicate functions\n   * for specified operators.\n   * @param {boolean} [opts.raw=false] Whether to return a more detailed\n   * response object.\n   * @param {object} [opts.runOpts] Options to pass to r#run.\n   * @return {Promise}\n   */\n  sum (mapper, field, query, opts) {\n    opts || (opts = {})\n    query || (query = {})\n\n    return this.waitForTable(mapper, opts)\n      .then(() => __super__.sum.call(this, mapper, field, query, opts))\n  },\n\n  /**\n   * Apply the given update to the record with the specified primary key.\n   *\n   * @name RethinkDBAdapter#update\n   * @method\n   * @param {object} mapper The mapper.\n   * @param {(string|number)} id The primary key of the record to be updated.\n   * @param {object} props The update to apply to the record.\n   * @param {object} [opts] Configuration options.\n   * @param {object} [opts.updateOpts] Options to pass to r#update.\n   * @param {boolean} [opts.raw=false] Whether to return a more detailed\n   * response object.\n   * @param {object} [opts.runOpts] Options to pass to r#run.\n   * @return {Promise}\n   */\n  update (mapper, id, props, opts) {\n    props || (props = {})\n    opts || (opts = {})\n\n    return this.waitForTable(mapper, opts)\n      .then(() => __super__.update.call(this, mapper, id, props, opts))\n  },\n\n  /**\n   * Apply the given update to all records that match the selection query.\n   *\n   * @name RethinkDBAdapter#updateAll\n   * @method\n   * @param {object} mapper The mapper.\n   * @param {object} props The update to apply to the selected records.\n   * @param {object} [query] Selection query.\n   * @param {object} [query.where] Filtering criteria.\n   * @param {string|Array} [query.orderBy] Sorting criteria.\n   * @param {string|Array} [query.sort] Same as `query.sort`.\n   * @param {number} [query.limit] Limit results.\n   * @param {number} [query.skip] Offset results.\n   * @param {number} [query.offset] Same as `query.skip`.\n   * @param {object} [opts] Configuration options.\n   * @param {object} [opts.operators] Override the default predicate functions\n   * for specified operators.\n   * @param {boolean} [opts.raw=false] Whether to return a more detailed\n   * response object.\n   * @param {object} [opts.runOpts] Options to pass to r#run.\n   * @param {object} [opts.updateOpts] Options to pass to r#update.\n   * @return {Promise}\n   */\n  updateAll (mapper, props, query, opts) {\n    props || (props = {})\n    query || (query = {})\n    opts || (opts = {})\n\n    return this.waitForTable(mapper, opts)\n      .then(() => __super__.updateAll.call(this, mapper, props, query, opts))\n  },\n\n  /**\n   * Update the given records in a single batch.\n   *\n   * @name RethinkDBAdapter#updateMany\n   * @method\n   * @param {object} mapper The mapper.\n   * @param {Object[]} records The records to update.\n   * @param {object} [opts] Configuration options.\n   * @param {object} [opts.insertOpts] Options to pass to r#insert.\n   * @param {boolean} [opts.raw=false] Whether to return a more detailed\n   * response object.\n   * @param {object} [opts.runOpts] Options to pass to r#run.\n   * @return {Promise}\n   */\n  updateMany (mapper, records, opts) {\n    records || (records = [])\n    opts || (opts = {})\n\n    return this.waitForTable(mapper, opts)\n      .then(() => __super__.updateMany.call(this, mapper, records, opts))\n  }\n})\n\n/**\n * Details of the current version of the `js-data-rethinkdb` module.\n *\n * @example <caption>ES2015 modules import</caption>\n * import { version } from 'js-data-rethinkdb';\n * console.log(version.full);\n *\n * @example <caption>CommonJS import</caption>\n * const version = require('js-data-rethinkdb').version;\n * console.log(version.full);\n *\n * @name module:js-data-rethinkdb.version\n * @type {object}\n * @property {string} version.full The full semver value.\n * @property {number} version.major The major version number.\n * @property {number} version.minor The minor version number.\n * @property {number} version.patch The patch version number.\n * @property {(string|boolean)} version.alpha The alpha version value,\n * otherwise `false` if the current version is not alpha.\n * @property {(string|boolean)} version.beta The beta version value,\n * otherwise `false` if the current version is not beta.\n */\nexport const version = '<%= version %>'\n\n/**\n * {@link RethinkDBAdapter} class.\n *\n * @example <caption>ES2015 modules import</caption>\n * import { RethinkDBAdapter } from 'js-data-rethinkdb';\n * const adapter = new RethinkDBAdapter();\n *\n * @example <caption>CommonJS import</caption>\n * const RethinkDBAdapter = require('js-data-rethinkdb').RethinkDBAdapter;\n * const adapter = new RethinkDBAdapter();\n *\n * @name module:js-data-rethinkdb.RethinkDBAdapter\n * @see RethinkDBAdapter\n * @type {Constructor}\n */\n\n/**\n * Registered as `js-data-rethinkdb` in NPM.\n *\n * @example <caption>Install from NPM</caption>\n * npm i --save js-data-rethinkdb js-data\n *\n * @example <caption>ES2015 modules import</caption>\n * import { RethinkDBAdapter } from 'js-data-rethinkdb';\n * const adapter = new RethinkDBAdapter();\n *\n * @example <caption>CommonJS import</caption>\n * const RethinkDBAdapter = require('js-data-rethinkdb').RethinkDBAdapter;\n * const adapter = new RethinkDBAdapter();\n *\n * @module js-data-rethinkdb\n */\n\n/**\n * Create a subclass of this RethinkDBAdapter:\n * @example <caption>RethinkDBAdapter.extend</caption>\n * // Normally you would do: import { RethinkDBAdapter } from 'js-data-rethinkdb';\n * const JSDataRethinkDB = require('js-data-rethinkdb');\n * const { RethinkDBAdapter } = JSDataRethinkDB;\n * console.log('Using JSDataRethinkDB v' + JSDataRethinkDB.version.full);\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomRethinkDBAdapterClass extends RethinkDBAdapter {\n *   foo () { return 'bar'; }\n *   static beep () { return 'boop'; }\n * }\n * const customRethinkDBAdapter = new CustomRethinkDBAdapterClass();\n * console.log(customRethinkDBAdapter.foo());\n * console.log(CustomRethinkDBAdapterClass.beep());\n *\n * // Extend the class using alternate method.\n * const OtherRethinkDBAdapterClass = RethinkDBAdapter.extend({\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const otherRethinkDBAdapter = new OtherRethinkDBAdapterClass();\n * console.log(otherRethinkDBAdapter.foo());\n * console.log(OtherRethinkDBAdapterClass.beep());\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherRethinkDBAdapterClass () {\n *   RethinkDBAdapter.call(this);\n *   this.created_at = new Date().getTime();\n * }\n * RethinkDBAdapter.extend({\n *   constructor: AnotherRethinkDBAdapterClass,\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * })\n * const anotherRethinkDBAdapter = new AnotherRethinkDBAdapterClass();\n * console.log(anotherRethinkDBAdapter.created_at);\n * console.log(anotherRethinkDBAdapter.foo());\n * console.log(AnotherRethinkDBAdapterClass.beep());\n *\n * @method RethinkDBAdapter.extend\n * @param {object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this RethinkDBAdapter class.\n * @since 3.0.0\n */\n"],"names":["__super__","Adapter","prototype","R_OPTS_DEFAULTS","INSERT_OPTS_DEFAULTS","UPDATE_OPTS_DEFAULTS","DELETE_OPTS_DEFAULTS","RUN_OPTS_DEFAULTS","equal","r","row","field","value","default","eq","notEqual","ne","OPERATORS","gt","ge","lt","le","setIntersection","expr","count","contains","not","Object","freeze","RethinkDBAdapter","opts","classCallCheck","defineProperties","undefined","call","insertOpts","fillIn","updateOpts","deleteOpts","runOpts","operators","rOpts","rethinkdbdash","extend","cursor","errors","first_error","Error","mapper","query","filterSequence","selectTable","run","getOpt","then","props","returnChanges","insert","_handleErrors","record","changes","length","new_val","records","map","change","id","get","delete","_pluck","rql","utils","isString","fields","isArray","pluck","sum","update","skipped","_find","conflict","where","ops","predicates","forOwn","clause","isObject","op","push","groups","forEach","_where","i","prev","parser","_applyWhereFromArray","_applyWhereFromObject","group","isOr","len","charAt","substr","predicateFn","getOperator","predicateResult","or","and","subQuery","_testArrayGroup","_testObjectGroup","sequence","plainCopy","orderBy","sort","skip","offset","config","keyword","reserved","indexOf","keys","filter","toUpperCase","desc","limit","db","isUndefined","selectDb","table","snakeCase","name","databases","branch","dbList","dbCreate","waitForDb","tables","tableList","tableCreate","index","waitForTable","indices","indexList","indexCreate","indexWait","create","createMany","destroy","destroyAll","with","relationList","tasks","def","relationName","relation","relationDef","getRelation","foreignKey","type","waitForIndex","Promise","all","find","findAll","operator","ownOps","updateAll","updateMany","version"],"mappings":"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"}